// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: device.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllDevice = `-- name: CountAllDevice :one
SELECT count(*) FROM device
`

func (q *Queries) CountAllDevice(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllDevice)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllDevice = `-- name: GetAllDevice :many
SELECT id, token, name, location, created_at, updated_at FROM device
`

func (q *Queries) GetAllDevice(ctx context.Context) ([]Device, error) {
	rows, err := q.db.Query(ctx, getAllDevice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Token,
			&i.Name,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllNameDevice = `-- name: GetAllNameDevice :many
SELECT id, name FROM device
`

type GetAllNameDeviceRow struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) GetAllNameDevice(ctx context.Context) ([]GetAllNameDeviceRow, error) {
	rows, err := q.db.Query(ctx, getAllNameDevice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllNameDeviceRow
	for rows.Next() {
		var i GetAllNameDeviceRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
