// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: history.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllHistory = `-- name: CountAllHistory :one
SELECT count(h.*) FROM history h
JOIN users u ON u.id = h.user_id
JOIN device d ON d.id = h.device_id
`

func (q *Queries) CountAllHistory(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllHistory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createHistory = `-- name: CreateHistory :exec
INSERT INTO history (user_id, device_id, success, failed)
VALUES ($1, $2, $3, $4)
`

type CreateHistoryParams struct {
	UserID   pgtype.UUID
	DeviceID pgtype.UUID
	Success  int32
	Failed   int32
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) error {
	_, err := q.db.Exec(ctx, createHistory,
		arg.UserID,
		arg.DeviceID,
		arg.Success,
		arg.Failed,
	)
	return err
}

const getAllHistory = `-- name: GetAllHistory :many
SELECT h.id, h.user_id, h.device_id, h.success, h.failed, h.created_at, u.first_name, u.last_name, d.name as device_name FROM history h
JOIN users u ON u.id = h.user_id
JOIN device d ON d.id = h.device_id
`

type GetAllHistoryRow struct {
	ID         pgtype.UUID
	UserID     pgtype.UUID
	DeviceID   pgtype.UUID
	Success    int32
	Failed     int32
	CreatedAt  pgtype.Timestamp
	FirstName  string
	LastName   pgtype.Text
	DeviceName string
}

func (q *Queries) GetAllHistory(ctx context.Context) ([]GetAllHistoryRow, error) {
	rows, err := q.db.Query(ctx, getAllHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllHistoryRow
	for rows.Next() {
		var i GetAllHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceID,
			&i.Success,
			&i.Failed,
			&i.CreatedAt,
			&i.FirstName,
			&i.LastName,
			&i.DeviceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHistoryStatistic = `-- name: GetAllHistoryStatistic :many
SELECT MIN(created_at)::date as date, SUM(success) AS success, SUM(failed) AS failed
FROM history
`

type GetAllHistoryStatisticRow struct {
	Date    pgtype.Date
	Success int64
	Failed  int64
}

func (q *Queries) GetAllHistoryStatistic(ctx context.Context) ([]GetAllHistoryStatisticRow, error) {
	rows, err := q.db.Query(ctx, getAllHistoryStatistic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllHistoryStatisticRow
	for rows.Next() {
		var i GetAllHistoryStatisticRow
		if err := rows.Scan(&i.Date, &i.Success, &i.Failed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHistoryTopPerformance = `-- name: GetAllHistoryTopPerformance :many
SELECT h.user_id AS user_id, u.first_name, u.last_name, u.phone_number, SUM(h.success) AS success, SUM(h.failed) AS failed
FROM history h
JOIN users u ON u.id = h.user_id
WHERE h.created_at BETWEEN $1 AND $2
GROUP BY h.user_id, u.first_name, u.last_name, u.phone_number
ORDER BY success DESC
LIMIT $3
`

type GetAllHistoryTopPerformanceParams struct {
	StartDate pgtype.Timestamp
	EndDate   pgtype.Timestamp
	Limit     int32
}

type GetAllHistoryTopPerformanceRow struct {
	UserID      pgtype.UUID
	FirstName   string
	LastName    pgtype.Text
	PhoneNumber string
	Success     int64
	Failed      int64
}

func (q *Queries) GetAllHistoryTopPerformance(ctx context.Context, arg GetAllHistoryTopPerformanceParams) ([]GetAllHistoryTopPerformanceRow, error) {
	rows, err := q.db.Query(ctx, getAllHistoryTopPerformance, arg.StartDate, arg.EndDate, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllHistoryTopPerformanceRow
	for rows.Next() {
		var i GetAllHistoryTopPerformanceRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Success,
			&i.Failed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
