{
    // Place your be-revend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "Create handler": {
        "scope": "go",
        "prefix": "handler",
        "body": [
            "package handler",
            "",
            "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} interface {",
            "    $1",
            "}",
            ""
        ],
        "description": "Create handler"
    },
    "Create handler implementation": {
        "scope": "go",
        "prefix": "handlerimpl",
        "body": [
            "package handler",
            "",
            "import (",
            "	\"github.com/rizalarfiyan/be-revend/internal/service\"",
            ")",
            "",
            "type ${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g} struct {",
            "	service service.${TM_FILENAME_BASE/(.*)_handler_impl/${1:/pascalcase}/g}Service",
            "}",
            "",
            "func New${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g}(service service.${TM_FILENAME_BASE/(.*)_handler_impl/${1:/pascalcase}/g}Service) ${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g} {",
            "	return &${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g}{",
            "		service: service,",
            "	}",
            "}",
            ""
        ],
        "description": "Create handler implementation"
    },
    "Create handler config and implementation": {
        "scope": "go",
        "prefix": "handlerimplconf",
        "body": [
            "package handler",
            "",
            "import (",
            "	\"github.com/rizalarfiyan/be-revend/config\"",
            "	\"github.com/rizalarfiyan/be-revend/internal/service\"",
            "	baseModels \"github.com/rizalarfiyan/be-revend/models\"",
            ")",
            "",
            "type ${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g} struct {",
            "	service service.${TM_FILENAME_BASE/(.*)_handler_impl/${1:/pascalcase}/g}Service",
            "	conf    *baseModels.Config",
            "}",
            "",
            "func New${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g}(service service.${TM_FILENAME_BASE/(.*)_handler_impl/${1:/pascalcase}/g}Service) ${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g} {",
            "	return &${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g}{",
            "		service: service,",
            "		conf:    config.Get(),",
            "	}",
            "}",
            ""
        ],
        "description": "Create handler config and implementation"
    },
    "Create service": {
        "scope": "go",
        "prefix": "service",
        "body": [
            "package service",
            "",
            "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} interface {",
            "    $1",
            "}",
            ""
        ],
        "description": "Create service"
    },
    "Create service implementation": {
        "scope": "go",
        "prefix": "serviceimpl",
        "body": [
            "package service",
            "",
            "import (",
            "	\"github.com/rizalarfiyan/be-revend/internal/repository\"",
            ")",
            "",
            "type ${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g} struct {",
            "	repo repository.${TM_FILENAME_BASE/(.*)_service_impl/${1:/pascalcase}/g}Repository",
            "}",
            "",
            "func New${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g}(repo repository.${TM_FILENAME_BASE/(.*)_service_impl/${1:/pascalcase}/g}Repository) ${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g} {",
            "	return &${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g}{",
            "		repo: repo,",
            "	}",
            "}",
            "",
        ],
        "description": "Create service implementation"
    },
    "Create service config and implementation": {
        "scope": "go",
        "prefix": "serviceimplconf",
        "body": [
            "package service",
            "",
            "import (",
            "	\"github.com/rizalarfiyan/be-revend/config\"",
            "	\"github.com/rizalarfiyan/be-revend/internal/repository\"",
            "	baseModels \"github.com/rizalarfiyan/be-revend/models\"",
            ")",
            "",
            "type ${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g} struct {",
            "	repo repository.${TM_FILENAME_BASE/(.*)_service_impl/${1:/pascalcase}/g}Repository",
            "	conf *baseModels.Config",
            "}",
            "",
            "func New${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g}(repo repository.${TM_FILENAME_BASE/(.*)_service_impl/${1:/pascalcase}/g}Repository) ${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g} {",
            "	return &${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g}{",
            "		repo: repo,",
            "		conf: config.Get(),",
            "	}",
            "}",
            "",
        ],
        "description": "Create service config and implementation"
    },
    "Create repository": {
        "scope": "go",
        "prefix": "repo",
        "body": [
            "package repository",
            "",
            "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} interface {",
            "    $1",
            "}",
            ""
        ],
        "description": "Create repository"
    },
    "Create repository implementation": {
        "scope": "go",
        "prefix": "repoimpl",
        "body": [
            "package repository",
            "",
            "import (",
            "    \"github.com/jackc/pgx/v5/pgxpool\"",
            "    \"github.com/rizalarfiyan/be-revend/internal/sql\"",
            ")",
            "",
            "type ${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g} struct {",
            "    db    *pgxpool.Pool",
            "    query *sql.Queries",
            "}",
            "",
            "func New${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g}(db *pgxpool.Pool) ${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g} {",
            "    return &${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g}{",
            "        db:    db,",
            "        query: sql.New(db),",
            "    }",
            "}",
            ""
        ],
        "description": "Create repository implementation"
    },
    "Create repository and redis implementation": {
        "scope": "go",
        "prefix": "repoimplredis",
        "body": [
            "package repository",
            "",
            "import (",
            "    \"github.com/jackc/pgx/v5/pgxpool\"",
            "    \"github.com/rizalarfiyan/be-revend/database\"",
            "    \"github.com/rizalarfiyan/be-revend/internal/sql\"",
            ")",
            "",
            "type ${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g} struct {",
            "    db    *pgxpool.Pool",
            "    query *sql.Queries",
            "    redis database.RedisInstance",
            "}",
            "",
            "func New${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g}(db *pgxpool.Pool, redis database.RedisInstance) ${TM_FILENAME_BASE/(.*)_impl/${1:/pascalcase}/g} {",
            "    return &${TM_FILENAME_BASE/(.*)_impl/${1:/camelcase}/g}{",
            "        db:    db,",
            "        query: sql.New(db),",
            "        redis: redis,",
            "    }",
            "}",
            ""
        ],
        "description": "Create repository and redis implementation"
    }
}
